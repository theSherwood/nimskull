csEmpty	sem/sigmatch.html#csEmpty	TCandidateState.csEmpty	
csMatch	sem/sigmatch.html#csMatch	TCandidateState.csMatch	
csNoMatch	sem/sigmatch.html#csNoMatch	TCandidateState.csNoMatch	
TCandidateState	sem/sigmatch.html#TCandidateState	sigmatch: TCandidateState	
TCandidate	sem/sigmatch.html#TCandidate	sigmatch: TCandidate	
trDontBind	sem/sigmatch.html#trDontBind	TTypeRelFlag.trDontBind	
trNoCovariance	sem/sigmatch.html#trNoCovariance	TTypeRelFlag.trNoCovariance	
trBindGenericParam	sem/sigmatch.html#trBindGenericParam	TTypeRelFlag.trBindGenericParam	
TTypeRelFlag	sem/sigmatch.html#TTypeRelFlag	sigmatch: TTypeRelFlag	
TTypeRelFlags	sem/sigmatch.html#TTypeRelFlags	sigmatch: TTypeRelFlags	
toDebugCallableCandidate	sem/sigmatch.html#toDebugCallableCandidate,TCandidate	sigmatch: toDebugCallableCandidate(c: TCandidate): DebugCallableCandidate	
hasFauxMatch	sem/sigmatch.html#hasFauxMatch.t,TCandidate	sigmatch: hasFauxMatch(c: TCandidate): bool	
initCandidate	sem/sigmatch.html#initCandidate,PContext,TCandidate,PType	sigmatch: initCandidate(ctx: PContext; c: var TCandidate; callee: PType)	
initCallCandidate	sem/sigmatch.html#initCallCandidate,PContext,TCandidate,PSym,int	sigmatch: initCallCandidate(ctx: PContext; c: var TCandidate; callee: PSym;\n                  calleeScope = -1)	
newCallCandidate	sem/sigmatch.html#newCallCandidate,PContext,PSym,int	sigmatch: newCallCandidate(ctx: PContext; callee: PSym; calleeScope = -1): TCandidate	
newCandidate	sem/sigmatch.html#newCandidate,PContext,PType	sigmatch: newCandidate(ctx: PContext; callee: PType): TCandidate	
writeMatches	sem/sigmatch.html#writeMatches,TCandidate	sigmatch: writeMatches(c: TCandidate)	
cmpCandidates	sem/sigmatch.html#cmpCandidates,TCandidate,TCandidate	sigmatch: cmpCandidates(a, b: TCandidate): int	
matchUserTypeClass	sem/sigmatch.html#matchUserTypeClass,TCandidate,PType,PType	sigmatch: matchUserTypeClass(m: var TCandidate; ff, a: PType): PType	
inferStaticParam	sem/sigmatch.html#inferStaticParam,TCandidate,PNode,BiggestInt	sigmatch: inferStaticParam(c: var TCandidate; lhs: PNode; rhs: BiggestInt): bool	
typeRel	sem/sigmatch.html#typeRel,TCandidate,PType,PType,TTypeRelFlags	sigmatch: typeRel(c: var TCandidate; f, aOrig: PType; flags: TTypeRelFlags = {}): TTypeRelation	
cmpTypes	sem/sigmatch.html#cmpTypes,PContext,PType,PType	sigmatch: cmpTypes(c: PContext; f, a: PType): TTypeRelation	
paramTypesMatch	sem/sigmatch.html#paramTypesMatch,TCandidate,PType,PType,PNode	sigmatch: paramTypesMatch(candidate: var TCandidate; formal, passed: PType; arg: PNode): PNode	
matchesGenericParams	sem/sigmatch.html#matchesGenericParams,PContext,PNode,TCandidate	sigmatch: matchesGenericParams(c: PContext; args: PNode; m: var TCandidate)	
semFinishOperands	sem/sigmatch.html#semFinishOperands,PContext,PNode	sigmatch: semFinishOperands(c: PContext; n: PNode)	
partialMatch	sem/sigmatch.html#partialMatch,PContext,PNode,PNode,TCandidate	sigmatch: partialMatch(c: PContext; n, nOrig: PNode; m: var TCandidate)	
matches	sem/sigmatch.html#matches,PContext,PNode,PNode,TCandidate	sigmatch: matches(c: PContext; n, nOrig: PNode; m: var TCandidate)	
argtypeMatches	sem/sigmatch.html#argtypeMatches,PContext,PType,PType	sigmatch: argtypeMatches(c: PContext; f, a: PType; fromHlo = false): bool	
instTypeBoundOp	sem/sigmatch.html#instTypeBoundOp,PContext,PSym,PType,TLineInfo,TTypeAttachedOp,int	sigmatch: instTypeBoundOp(c: PContext; dc: PSym; t: PType; info: TLineInfo;\n                op: TTypeAttachedOp; col: int): PSym	
