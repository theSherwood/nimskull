upName	sem/lambdalifting.html#upName	lambdalifting: upName	
paramName	sem/lambdalifting.html#paramName	lambdalifting: paramName	
envName	sem/lambdalifting.html#envName	lambdalifting: envName	
getClosureIterResult	sem/lambdalifting.html#getClosureIterResult,ModuleGraph,PSym,IdGenerator	lambdalifting: getClosureIterResult(g: ModuleGraph; iter: PSym; idgen: IdGenerator): PSym	
getEnvParam	sem/lambdalifting.html#getEnvParam,PSym	lambdalifting: getEnvParam(routine: PSym): PSym	
makeClosure	sem/lambdalifting.html#makeClosure,ModuleGraph,IdGenerator,PSym,PNode,TLineInfo	lambdalifting: makeClosure(g: ModuleGraph; idgen: IdGenerator; prc: PSym; env: PNode;\n            info: TLineInfo): PNode	
isIterator	sem/lambdalifting.html#isIterator.t,PSym	lambdalifting: isIterator(owner: PSym): bool	
freshVarForClosureIter	sem/lambdalifting.html#freshVarForClosureIter,ModuleGraph,PSym,IdGenerator,PSym	lambdalifting: freshVarForClosureIter(g: ModuleGraph; s: PSym; idgen: IdGenerator; owner: PSym): PNode	
getStateField	sem/lambdalifting.html#getStateField,ModuleGraph,PSym	lambdalifting: getStateField(g: ModuleGraph; owner: PSym): PSym	
liftIterToProc	sem/lambdalifting.html#liftIterToProc,ModuleGraph,PSym,PNode,PType,IdGenerator	lambdalifting: liftIterToProc(g: ModuleGraph; fn: PSym; body: PNode; ptrType: PType;\n               idgen: IdGenerator): PNode	
liftLambdas	sem/lambdalifting.html#liftLambdas,ModuleGraph,PSym,PNode,IdGenerator	lambdalifting: liftLambdas(g: ModuleGraph; fn: PSym; body: PNode; idgen: IdGenerator): tuple[\n    body: PNode, env: PSym]	
liftLambdasForTopLevel	sem/lambdalifting.html#liftLambdasForTopLevel,PSym,PNode	lambdalifting: liftLambdasForTopLevel(module: PSym; body: PNode): PNode	
liftIterSym	sem/lambdalifting.html#liftIterSym,ModuleGraph,PNode,IdGenerator,PSym,PSym	lambdalifting: liftIterSym(g: ModuleGraph; n: PNode; idgen: IdGenerator; owner, currEnv: PSym): PNode	
ensureEnvParam	sem/lambdalifting.html#ensureEnvParam,ModuleGraph,IdGenerator,PSym	lambdalifting: ensureEnvParam(graph: ModuleGraph; idgen: IdGenerator; prc: PSym)	
liftForLoop	sem/lambdalifting.html#liftForLoop,ModuleGraph,PNode,IdGenerator,PSym	lambdalifting: liftForLoop(g: ModuleGraph; body: PNode; idgen: IdGenerator; owner: PSym): PNode	
finishClosureIterator	sem/lambdalifting.html#finishClosureIterator,ModuleGraph,IdGenerator,PSym	lambdalifting: finishClosureIterator(g: ModuleGraph; idgen: IdGenerator; iter: PSym)	
