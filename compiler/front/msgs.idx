flushDot	front/msgs.html#flushDot,ConfigRef	msgs: flushDot(conf: ConfigRef)	
gCmdLineInfo	front/msgs.html#gCmdLineInfo	msgs: gCmdLineInfo	
suggestWriteln	front/msgs.html#suggestWriteln,ConfigRef,string	msgs: suggestWriteln(conf: ConfigRef; s: string)	
msgQuit	front/msgs.html#msgQuit,int8	msgs: msgQuit(x: int8)	
msgQuit	front/msgs.html#msgQuit,string	msgs: msgQuit(x: string)	
suggestQuit	front/msgs.html#suggestQuit	msgs: suggestQuit()	
ColOffset	front/msgs.html#ColOffset	msgs: ColOffset	
getInfoContextLen	front/msgs.html#getInfoContextLen,ConfigRef	msgs: getInfoContextLen(conf: ConfigRef): int	
setInfoContextLen	front/msgs.html#setInfoContextLen,ConfigRef,int	msgs: setInfoContextLen(conf: ConfigRef; L: int)	
pushInfoContext	front/msgs.html#pushInfoContext,ConfigRef,TLineInfo,PSym	msgs: pushInfoContext(conf: ConfigRef; info: TLineInfo; detail: PSym = nil)	
popInfoContext	front/msgs.html#popInfoContext,ConfigRef	msgs: popInfoContext(conf: ConfigRef)	
getInfoContext	front/msgs.html#getInfoContext,ConfigRef,int	msgs: getInfoContext(conf: ConfigRef; index: int): TLineInfo	
toProjPath	front/msgs.html#toProjPath,ConfigRef,FileIndex	msgs: toProjPath(conf: ConfigRef; fileIdx: FileIndex): string	
toFullPath	front/msgs.html#toFullPath,ConfigRef,FileIndex	msgs: toFullPath(conf: ConfigRef; fileIdx: FileIndex): string	
toReportLineInfo	front/msgs.html#toReportLineInfo,ConfigRef,TLineInfo	msgs: toReportLineInfo(conf: ConfigRef; info: TLineInfo): ReportLineInfo	
setDirtyFile	front/msgs.html#setDirtyFile,ConfigRef,FileIndex,AbsoluteFile	msgs: setDirtyFile(conf: ConfigRef; fileIdx: FileIndex; filename: AbsoluteFile)	
setHash	front/msgs.html#setHash,ConfigRef,FileIndex,string	msgs: setHash(conf: ConfigRef; fileIdx: FileIndex; hash: string)	
getHash	front/msgs.html#getHash,ConfigRef,FileIndex	msgs: getHash(conf: ConfigRef; fileIdx: FileIndex): string	
toFullPathConsiderDirty	front/msgs.html#toFullPathConsiderDirty,ConfigRef,FileIndex	msgs: toFullPathConsiderDirty(conf: ConfigRef; fileIdx: FileIndex): AbsoluteFile	
toProjPath	front/msgs.html#toProjPath.t,ConfigRef,TLineInfo	msgs: toProjPath(conf: ConfigRef; info: TLineInfo): string	
toFullPath	front/msgs.html#toFullPath.t,ConfigRef,TLineInfo	msgs: toFullPath(conf: ConfigRef; info: TLineInfo): string	
toFullPathConsiderDirty	front/msgs.html#toFullPathConsiderDirty.t,ConfigRef,TLineInfo	msgs: toFullPathConsiderDirty(conf: ConfigRef; info: TLineInfo): string	
toFilenameOption	front/msgs.html#toFilenameOption,ConfigRef,FileIndex,FilenameOption	msgs: toFilenameOption(conf: ConfigRef; fileIdx: FileIndex; opt: FilenameOption): string	
formatPath	front/msgs.html#formatPath,ConfigRef,string	msgs: formatPath(conf: ConfigRef; path: string): string	
toMsgFilename	front/msgs.html#toMsgFilename,ConfigRef,FileIndex	msgs: toMsgFilename(conf: ConfigRef; fileIdx: FileIndex): string	
toMsgFilename	front/msgs.html#toMsgFilename.t,ConfigRef,TLineInfo	msgs: toMsgFilename(conf: ConfigRef; info: TLineInfo): string	
toLinenumber	front/msgs.html#toLinenumber,TLineInfo	msgs: toLinenumber(info: TLineInfo): int	
toColumn	front/msgs.html#toColumn,TLineInfo	msgs: toColumn(info: TLineInfo): int	
toFileLineCol	front/msgs.html#toFileLineCol,InstantiationInfo	msgs: toFileLineCol(info: InstantiationInfo): string	
toFileLineCol	front/msgs.html#toFileLineCol,ConfigRef,TLineInfo	msgs: toFileLineCol(conf: ConfigRef; info: TLineInfo): string	
toReportPoint	front/msgs.html#toReportPoint,ConfigRef,TLineInfo	msgs: toReportPoint(conf: ConfigRef; info: TLineInfo): ReportLineInfo	
`$`	front/msgs.html#$,ConfigRef,TLineInfo	msgs: `$`(conf: ConfigRef; info: TLineInfo): string	
`$`	front/msgs.html#$,TLineInfo	msgs: `$`(info: TLineInfo): string	
msgWrite	front/msgs.html#msgWrite,ConfigRef,string,MsgFlags	msgs: msgWrite(conf: ConfigRef; s: string; flags: MsgFlags = {})	
log	front/msgs.html#log,string	msgs: log(s: string)	
getContext	front/msgs.html#getContext,ConfigRef,TLineInfo	msgs: getContext(conf: ConfigRef; lastinfo: TLineInfo): seq[ReportContext]	
numLines	front/msgs.html#numLines,ConfigRef,FileIndex	msgs: numLines(conf: ConfigRef; fileIdx: FileIndex): int	
sourceLine	front/msgs.html#sourceLine,ConfigRef,TLineInfo	msgs: sourceLine(conf: ConfigRef; i: TLineInfo): string	
getSurroundingSrc	front/msgs.html#getSurroundingSrc,ConfigRef,TLineInfo	msgs: getSurroundingSrc(conf: ConfigRef; info: TLineInfo): string	
astDiagVmToLegacyReportKind	front/msgs.html#astDiagVmToLegacyReportKind,AstDiagVmKind	msgs: astDiagVmToLegacyReportKind(evt: AstDiagVmKind): ReportKind	
astDiagVmGenToLegacyReportKind	front/msgs.html#astDiagVmGenToLegacyReportKind,AstDiagVmGenKind	msgs: astDiagVmGenToLegacyReportKind(diag: AstDiagVmGenKind): ReportKind	
astDiagToLegacyReportKind	front/msgs.html#astDiagToLegacyReportKind,AstDiagKind,Option[AstDiagVmGenKind],Option[AstDiagVmKind]	msgs: astDiagToLegacyReportKind(diag: AstDiagKind; vmGenDiag: Option[AstDiagVmGenKind] = none(\n    AstDiagVmGenKind); vmEvent: Option[AstDiagVmKind] = none(AstDiagVmKind)): ReportKind	
astDiagToLegacyReportKind	front/msgs.html#astDiagToLegacyReportKind,PAstDiag	msgs: astDiagToLegacyReportKind(diag: PAstDiag): ReportKind	
report	front/msgs.html#report,ConfigRef,PNode	msgs: report(conf: ConfigRef; node: PNode): TErrorHandling	
handleReport	front/msgs.html#handleReport,ConfigRef,Report,InstantiationInfo,TErrorHandling	msgs: handleReport(conf: ConfigRef; r: Report; reportFrom: InstantiationInfo;\n             eh: TErrorHandling = doNothing)	
globalAssert	front/msgs.html#globalAssert.t,ConfigRef,untyped,TLineInfo,string	msgs: globalAssert(conf: ConfigRef; cond: untyped; info: TLineInfo = unknownLineInfo;\n             arg = &quot;&quot;)	
fatalReport	front/msgs.html#fatalReport.t,ConfigRef,TLineInfo,ReportTypes	msgs: fatalReport(conf: ConfigRef; info: TLineInfo; report: ReportTypes)	
globalReport	front/msgs.html#globalReport.t,ConfigRef,TLineInfo,ReportTypes	msgs: globalReport(conf: ConfigRef; info: TLineInfo; report: ReportTypes)	
globalReport	front/msgs.html#globalReport.t,ConfigRef,ReportTypes	msgs: globalReport(conf: ConfigRef; report: ReportTypes)	
localReport	front/msgs.html#localReport.t,ConfigRef,TLineInfo,ReportTypes	msgs: localReport(conf: ConfigRef; info: TLineInfo; report: ReportTypes)	
localReport	front/msgs.html#localReport.t,ConfigRef,PNode,SemReport	msgs: localReport(conf: ConfigRef; node: PNode; report: SemReport)	
temporaryStringError	front/msgs.html#temporaryStringError,ConfigRef,TLineInfo,string	msgs: temporaryStringError(conf: ConfigRef; info: TLineInfo; text: string)	
localReport	front/msgs.html#localReport.t,ConfigRef,ReportTypes	msgs: localReport(conf: ConfigRef; report: ReportTypes)	
localReport	front/msgs.html#localReport.t,ConfigRef,Report	msgs: localReport(conf: ConfigRef; report: Report)	
internalError	front/msgs.html#internalError.t,ConfigRef,InternalReportKind,string	msgs: internalError(conf: ConfigRef; repKind: InternalReportKind; fail: string): untyped	
internalError	front/msgs.html#internalError.t,ConfigRef,TLineInfo,InternalReportKind,string	msgs: internalError(conf: ConfigRef; info: TLineInfo; repKind: InternalReportKind;\n              fail: string): untyped	
doInternalUnreachable	front/msgs.html#doInternalUnreachable,ConfigRef,TLineInfo,string,InstantiationInfo	msgs: doInternalUnreachable(conf: ConfigRef; info: TLineInfo; msg: string;\n                      instLoc: InstantiationInfo)	
internalError	front/msgs.html#internalError.t,ConfigRef,TLineInfo,string	msgs: internalError(conf: ConfigRef; info: TLineInfo; fail: string): untyped	
internalError	front/msgs.html#internalError.t,ConfigRef,string	msgs: internalError(conf: ConfigRef; fail: string): untyped	
doInternalAssert	front/msgs.html#doInternalAssert,ConfigRef,InstantiationInfo,string	msgs: doInternalAssert(conf: ConfigRef; instLoc: InstantiationInfo; msg: string;\n                 info = unknownLineInfo)	
internalAssert	front/msgs.html#internalAssert.t,ConfigRef,bool,TLineInfo,string	msgs: internalAssert(conf: ConfigRef; condition: bool; info: TLineInfo;\n               failMsg: string = &quot;&quot;)	
internalAssert	front/msgs.html#internalAssert.t,ConfigRef,bool,string	msgs: internalAssert(conf: ConfigRef; condition: bool; failMsg = &quot;&quot;)	
lexDiagToLegacyReportKind	front/msgs.html#lexDiagToLegacyReportKind,LexerDiagKind	msgs: lexDiagToLegacyReportKind(diag: LexerDiagKind): ReportKind	
lexerDiagToLegacyReport	front/msgs.html#lexerDiagToLegacyReport,LexerDiag	msgs: lexerDiagToLegacyReport(diag: LexerDiag): Report	
handleLexerDiag	front/msgs.html#handleLexerDiag,ConfigRef,LexerDiag,InstantiationInfo,TErrorHandling	msgs: handleLexerDiag(conf: ConfigRef; diag: LexerDiag; reportFrom: InstantiationInfo;\n                eh: TErrorHandling = doNothing)	
handleParserDiag	front/msgs.html#handleParserDiag,ConfigRef,ParseDiag,InstantiationInfo,TErrorHandling	msgs: handleParserDiag(conf: ConfigRef; diag: ParseDiag;\n                 reportFrom: InstantiationInfo; eh: TErrorHandling = doNothing)	
handleReport	front/msgs.html#handleReport,ConfigRef,PAstDiag,InstantiationInfo,TErrorHandling	msgs: handleReport(conf: ConfigRef; diag: PAstDiag; reportFrom: InstantiationInfo;\n             eh: TErrorHandling = doNothing)	
semReportCountMismatch	front/msgs.html#semReportCountMismatch,ReportKind,,,PNode	msgs: semReportCountMismatch(kind: ReportKind; expected, got: distinct SomeInteger;\n                       node: PNode = nil): SemReport	
joinAnyOf	front/msgs.html#joinAnyOf,seq[T],bool	msgs: joinAnyOf[T](values: seq[T]; quote: bool = false): string	
createSemIllformedAstMsg	front/msgs.html#createSemIllformedAstMsg.t,PNode,set[TNodeKind]	msgs: createSemIllformedAstMsg(node: PNode; expected: set[TNodeKind]): string	
semReportIllformedAst	front/msgs.html#semReportIllformedAst.t,ConfigRef,PNode,string	msgs: semReportIllformedAst(conf: ConfigRef; node: PNode; explain: string): untyped	
semReportIllformedAst	front/msgs.html#semReportIllformedAst.t,ConfigRef,PNode,set[TNodeKind]	msgs: semReportIllformedAst(conf: ConfigRef; node: PNode; expected: set[TNodeKind]): untyped	
localReport	front/msgs.html#localReport.t,ConfigRef,TLineInfo,ReportTypes_2	msgs: localReport(conf: ConfigRef; info: TLineInfo; report: ReportTypes)	
quotedFilename	front/msgs.html#quotedFilename,ConfigRef,TLineInfo	msgs: quotedFilename(conf: ConfigRef; i: TLineInfo): Rope	
listWarnings	front/msgs.html#listWarnings,ConfigRef	msgs: listWarnings(conf: ConfigRef)	
listHints	front/msgs.html#listHints,ConfigRef	msgs: listHints(conf: ConfigRef)	
uniqueModuleName	front/msgs.html#uniqueModuleName,ConfigRef,FileIndex	msgs: uniqueModuleName(conf: ConfigRef; fid: FileIndex): string	
