NonMagics	backend/cgen.html#NonMagics	cgen: NonMagics	
sfTopLevel	backend/cgen.html#sfTopLevel	cgen: sfTopLevel	
ensureObjectFields	backend/cgen.html#ensureObjectFields,BModule,PSym,PType	cgen: ensureObjectFields(m: BModule; field: PSym; typ: PType)	
genTypeInfo	backend/cgen.html#genTypeInfo,ConfigRef,BModule,PType,TLineInfo	cgen: genTypeInfo(config: ConfigRef; m: BModule; t: PType; info: TLineInfo): Rope	
emulatedThreadVars	backend/cgen.html#emulatedThreadVars,ConfigRef	cgen: emulatedThreadVars(conf: ConfigRef): bool	
declareThreadVar	backend/cgen.html#declareThreadVar,BModule,PSym,bool	cgen: declareThreadVar(m: BModule; s: PSym; isExtern: bool)	
fillGlobalLoc	backend/cgen.html#fillGlobalLoc,BModule,PSym	cgen: fillGlobalLoc(m: BModule; s: PSym)	
defineGlobalVar	backend/cgen.html#defineGlobalVar,BModule,PSym	cgen: defineGlobalVar(m: BModule; s: PSym)	
fillProcLoc	backend/cgen.html#fillProcLoc,BModule,PSym	cgen: fillProcLoc(m: BModule; sym: PSym)	
genStmts	backend/cgen.html#genStmts,BProc,CgNode	cgen: genStmts(p: BProc; t: CgNode)	
useConst	backend/cgen.html#useConst,BModule,PSym	cgen: useConst(m: BModule; sym: PSym)	
genConstDefinition	backend/cgen.html#genConstDefinition,BModule,PSym	cgen: genConstDefinition(q: BModule; sym: PSym)	
symInDynamicLib	backend/cgen.html#symInDynamicLib,BModule,PSym	cgen: symInDynamicLib(m: BModule; sym: PSym)	
startProc	backend/cgen.html#startProc,BModule,PSym,CgNode	cgen: startProc(m: BModule; prc: PSym; procBody: CgNode = nil): BProc	
finishProc	backend/cgen.html#finishProc,BProc,PSym	cgen: finishProc(p: BProc; prc: PSym): string	
genProc	backend/cgen.html#genProc,BModule,PSym,CgNode	cgen: genProc(m: BModule; prc: PSym; procBody: CgNode): Rope	
genProcPrototype	backend/cgen.html#genProcPrototype,BModule,PSym	cgen: genProcPrototype(m: BModule; sym: PSym)	
genVarPrototype	backend/cgen.html#genVarPrototype,BModule,CgNode	cgen: genVarPrototype(m: BModule; n: CgNode)	
getInitName	backend/cgen.html#getInitName,BModule	cgen: getInitName(m: BModule): Rope	
getDatInitName	backend/cgen.html#getDatInitName,BModule	cgen: getDatInitName(m: BModule): Rope	
genMainProc	backend/cgen.html#genMainProc,BModule,Rope	cgen: genMainProc(m: BModule; body: Rope)	
genDatInitCode	backend/cgen.html#genDatInitCode,BModule	cgen: genDatInitCode(m: BModule): bool	
rawNewModule	backend/cgen.html#rawNewModule,BModuleList,PSym,AbsoluteFile	cgen: rawNewModule(g: BModuleList; module: PSym; filename: AbsoluteFile): BModule	
newModule	backend/cgen.html#newModule,BModuleList,PSym,ConfigRef	cgen: newModule(g: BModuleList; module: PSym; conf: ConfigRef): BModule	
finalizeModule	backend/cgen.html#finalizeModule,BModule	cgen: finalizeModule(m: BModule)	
finalizeMainModule	backend/cgen.html#finalizeMainModule,BModule	cgen: finalizeMainModule(m: BModule)	
cgenWriteModules	backend/cgen.html#cgenWriteModules,RootRef,ConfigRef	cgen: cgenWriteModules(backend: RootRef; config: ConfigRef)	
