execErrorVm	vm/compilerbridge.html#execErrorVm	ExecErrorKind.execErrorVm	
execErrorVmGen	vm/compilerbridge.html#execErrorVmGen	ExecErrorKind.execErrorVmGen	
execErrorQuit	vm/compilerbridge.html#execErrorQuit	ExecErrorKind.execErrorQuit	
ExecErrorKind	vm/compilerbridge.html#ExecErrorKind	compilerbridge: ExecErrorKind	
ExecErrorReport	vm/compilerbridge.html#ExecErrorReport	compilerbridge: ExecErrorReport	
ExecutionResult	vm/compilerbridge.html#ExecutionResult	compilerbridge: ExecutionResult	
PEvalContext	vm/compilerbridge.html#PEvalContext	compilerbridge: PEvalContext	
EvalContext	vm/compilerbridge.html#EvalContext	compilerbridge: EvalContext	
registerAdditionalOps	vm/compilerbridge.html#registerAdditionalOps,TCtx,bool	compilerbridge: registerAdditionalOps(c: var TCtx; disallowDangerous: bool)	
setupGlobalCtx	vm/compilerbridge.html#setupGlobalCtx,PSym,ModuleGraph,IdGenerator	compilerbridge: setupGlobalCtx(module: PSym; graph: ModuleGraph; idgen: IdGenerator)	
evalConstExpr	vm/compilerbridge.html#evalConstExpr,PSym,IdGenerator,ModuleGraph,PNode	compilerbridge: evalConstExpr(module: PSym; idgen: IdGenerator; g: ModuleGraph; e: PNode): PNode	
evalStaticExpr	vm/compilerbridge.html#evalStaticExpr,PSym,IdGenerator,ModuleGraph,PNode,PSym	compilerbridge: evalStaticExpr(module: PSym; idgen: IdGenerator; g: ModuleGraph; e: PNode;\n               prc: PSym): PNode	
evalStaticStmt	vm/compilerbridge.html#evalStaticStmt,PSym,IdGenerator,ModuleGraph,PNode,PSym	compilerbridge: evalStaticStmt(module: PSym; idgen: IdGenerator; g: ModuleGraph; e: PNode;\n               prc: PSym): PNode	
setupCompileTimeVar	vm/compilerbridge.html#setupCompileTimeVar,PSym,IdGenerator,ModuleGraph,PNode	compilerbridge: setupCompileTimeVar(module: PSym; idgen: IdGenerator; g: ModuleGraph; n: PNode)	
evalMacroCall	vm/compilerbridge.html#evalMacroCall,JitState,TCtx,PNode,PNode,PSym	compilerbridge: evalMacroCall(jit: var JitState; c: var TCtx; call, args: PNode; sym: PSym): PNode	
evalMacroCall	vm/compilerbridge.html#evalMacroCall,PSym,IdGenerator,ModuleGraph,ref.int,PNode,PNode,PSym	compilerbridge: evalMacroCall(module: PSym; idgen: IdGenerator; g: ModuleGraph;\n              templInstCounter: ref int; call, args: PNode; sym: PSym): PNode	
dumpVmProfilerData	vm/compilerbridge.html#dumpVmProfilerData,ModuleGraph	compilerbridge: dumpVmProfilerData(graph: ModuleGraph): string	
execProc	vm/compilerbridge.html#execProc,JitState,TCtx,PSym,openArray[PNode]	compilerbridge: execProc(jit: var JitState; c: var TCtx; sym: PSym; args: openArray[PNode]): PNode	
getGlobalValue	vm/compilerbridge.html#getGlobalValue,TCtx,PSym	compilerbridge: getGlobalValue(c: TCtx; s: PSym): PNode	
setGlobalValue	vm/compilerbridge.html#setGlobalValue,TCtx,PSym,PNode	compilerbridge: setGlobalValue(c: var TCtx; s: PSym; val: PNode)	
evalPass	vm/compilerbridge.html#evalPass	compilerbridge: evalPass	
