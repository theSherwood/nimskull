MirFragment	backend/backends.html#MirFragment	backends: MirFragment	
BackendConfig	backend/backends.html#BackendConfig	backends: BackendConfig	
Queue	backend/backends.html#Queue	backends: Queue	
DiscoveryData	backend/backends.html#DiscoveryData	backends: DiscoveryData	
bekDiscovered	backend/backends.html#bekDiscovered	BackendEventKind.bekDiscovered	
bekModule	backend/backends.html#bekModule	BackendEventKind.bekModule	
bekConstant	backend/backends.html#bekConstant	BackendEventKind.bekConstant	
bekPartial	backend/backends.html#bekPartial	BackendEventKind.bekPartial	
bekProcedure	backend/backends.html#bekProcedure	BackendEventKind.bekProcedure	
bekImported	backend/backends.html#bekImported	BackendEventKind.bekImported	
BackendEventKind	backend/backends.html#BackendEventKind	backends: BackendEventKind	
BackendEvent	backend/backends.html#BackendEvent	backends: BackendEvent	
append	backend/backends.html#append,MirFragment,sinkMirFragment	backends: append(dest: var MirFragment; src: sink MirFragment)	
visit	backend/backends.html#visit.i,Queue[T]	backends: visit[T](q: var Queue[T]): (int, lent T)	
peek	backend/backends.html#peek.i,Queue[T]	backends: peek[T](q: Queue[T]): (int, lent T)	
all	backend/backends.html#all.i,Queue[T]	backends: all[T](q: Queue[T]): (int, lent T)	
len	backend/backends.html#len,Queue[T]	backends: len[T](q: Queue[T]): int	
isProcessed	backend/backends.html#isProcessed,Queue[T]	backends: isProcessed[T](q: Queue[T]): bool	
moduleId	backend/backends.html#moduleId,PIdObj	backends: moduleId(o: PIdObj): int32	
generateMain	backend/backends.html#generateMain,ModuleGraph,ModuleList,PNode	backends: generateMain(graph: ModuleGraph; modules: ModuleList; result: PNode)	
generateTeardown	backend/backends.html#generateTeardown,ModuleGraph,ModuleList,PNode	backends: generateTeardown(graph: ModuleGraph; modules: ModuleList; result: PNode)	
generateMainProcedure	backend/backends.html#generateMainProcedure,ModuleGraph,IdGenerator,ModuleList	backends: generateMainProcedure(graph: ModuleGraph; idgen: IdGenerator;\n                      modules: ModuleList): PSym	
isEmpty	backend/backends.html#isEmpty,MirTree	backends: isEmpty(tree: MirTree): bool	
isEmpty	backend/backends.html#isEmpty,MirFragment	backends: isEmpty(f: MirFragment): bool	
deps	backend/backends.html#deps.i,MirTree	backends: deps(tree: MirTree): PSym	
preprocess	backend/backends.html#preprocess,WorkQueue,ModuleGraph,IdGenerator,PSym,FileIndex	backends: preprocess(queue: var WorkQueue; graph: ModuleGraph; idgen: IdGenerator;\n           prc: PSym; module: FileIndex)	
translate	backend/backends.html#translate,PSym,PNode,ModuleGraph,BackendConfig,IdGenerator	backends: translate(prc: PSym; body: PNode; graph: ModuleGraph; config: BackendConfig;\n          idgen: IdGenerator): MirFragment	
generateIR	backend/backends.html#generateIR,ModuleGraph,IdGenerator,PSym,sinkMirFragment	backends: generateIR(graph: ModuleGraph; idgen: IdGenerator; owner: PSym;\n           code: sink MirFragment): Body	
discoverFrom	backend/backends.html#discoverFrom,DiscoveryData,MirTree	backends: discoverFrom(data: var DiscoveryData; body: MirTree)	
discoverFrom	backend/backends.html#discoverFrom,DiscoveryData,PNode	backends: discoverFrom(data: var DiscoveryData; decl: PNode)	
process	backend/backends.html#process.i,ModuleGraph,ModuleList,DiscoveryData,BackendConfig	backends: process(graph: ModuleGraph; modules: var ModuleList;\n        discovery: var DiscoveryData; conf: BackendConfig): BackendEvent	
register	backend/backends.html#register,DiscoveryData,PSym	backends: register(data: var DiscoveryData; prc: PSym)	
registerGlobal	backend/backends.html#registerGlobal,DiscoveryData,PSym	backends: registerGlobal(data: var DiscoveryData; sym: PSym)	
registerLate	backend/backends.html#registerLate,DiscoveryData,PSym,FileIndex	backends: registerLate(discovery: var DiscoveryData; prc: PSym; module: FileIndex)	
rewind	backend/backends.html#rewind,DiscoveryData	backends: rewind(data: var DiscoveryData)	
