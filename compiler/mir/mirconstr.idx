Value	mir/mirconstr.html#Value	mirconstr: Value	
Fragment	mir/mirconstr.html#Fragment	mirconstr: Fragment	
MirBuilder	mir/mirconstr.html#MirBuilder	mirconstr: MirBuilder	
typ	mir/mirconstr.html#typ,Value	mirconstr: typ(val: Value): PType	
procNode	mir/mirconstr.html#procNode,ProcedureId	mirconstr: procNode(id: ProcedureId): MirNode	
endNode	mir/mirconstr.html#endNode,MirNodeKind	mirconstr: endNode(k: MirNodeKind): MirNode	
typeLit	mir/mirconstr.html#typeLit,PType	mirconstr: typeLit(t: PType): Value	
literal	mir/mirconstr.html#literal,PNode	mirconstr: literal(n: PNode): Value	
temp	mir/mirconstr.html#temp,PType,TempId	mirconstr: temp(typ: PType; id: TempId): Value	
alias	mir/mirconstr.html#alias,PType,TempId	mirconstr: alias(typ: PType; id: TempId): Value	
toValue	mir/mirconstr.html#toValue,ConstId,PType	mirconstr: toValue(id: ConstId; typ: PType): Value	
toValue	mir/mirconstr.html#toValue,GlobalId,PType	mirconstr: toValue(id: GlobalId; typ: PType): Value	
toValue	mir/mirconstr.html#toValue,ProcedureId,PType	mirconstr: toValue(id: ProcedureId; typ: PType): Value	
toValue	mir/mirconstr.html#toValue,range[],PSym	mirconstr: toValue(kind: range[mnkParam .. mnkLocal]; sym: PSym): Value	
len	mir/mirconstr.html#len,MirBuffer	mirconstr: len(b: MirBuffer): int	
hasUnassigned	mir/mirconstr.html#hasUnassigned,MirBuilder	mirconstr: hasUnassigned(bu: MirBuilder): bool	
staging	mir/mirconstr.html#staging,MirBuilder	mirconstr: staging(bu: var MirBuilder): var MirNodeSeq	
len	mir/mirconstr.html#len,Fragment	mirconstr: len(f: Fragment): int	
popSingle	mir/mirconstr.html#popSingle,MirBuilder,Fragment	mirconstr: popSingle(bu: var MirBuilder; f: Fragment): Value	
push	mir/mirconstr.html#push.t,MirBuilder,untyped	mirconstr: push(bu: var MirBuilder; body: untyped): Fragment	
pop	mir/mirconstr.html#pop,MirBuilder,Fragment	mirconstr: pop(bu: var MirBuilder; f: Fragment)	
withFront	mir/mirconstr.html#withFront.t,MirBuilder,untyped	mirconstr: withFront(bu: var MirBuilder; body: untyped)	
buildStmt	mir/mirconstr.html#buildStmt.t,MirBuilder,untyped	mirconstr: buildStmt(bu: var MirBuilder; body: untyped)	
buildStmt	mir/mirconstr.html#buildStmt.t,MirBuilder,MirNodeKind,untyped	mirconstr: buildStmt(bu: var MirBuilder; k: MirNodeKind; body: untyped)	
pos	mir/mirconstr.html#pos.t,Fragment	mirconstr: pos(f: Fragment): NodePosition	
initBuilder	mir/mirconstr.html#initBuilder,SourceId,sinkMirNodeSeq	mirconstr: initBuilder(id: SourceId; buf: sink MirNodeSeq = @[]): MirBuilder	
setSource	mir/mirconstr.html#setSource,MirBuilder,SourceId	mirconstr: setSource(bu: var MirBuilder; id: SourceId)	
add	mir/mirconstr.html#add,MirBuilder,sinkMirNode	mirconstr: add(bu: var MirBuilder; n: sink MirNode)	
add	mir/mirconstr.html#add,MirBuilder,SourceId,sinkMirNode	mirconstr: add(bu: var MirBuilder; id: SourceId; n: sink MirNode)	
emitFrom	mir/mirconstr.html#emitFrom,MirBuilder,MirTree,NodePosition	mirconstr: emitFrom(bu: var MirBuilder; tree: MirTree; n: NodePosition)	
subTree	mir/mirconstr.html#subTree.t,MirBuilder,MirNode,untyped	mirconstr: subTree(bu: var MirBuilder; n: MirNode; body: untyped)	
subTree	mir/mirconstr.html#subTree.t,MirBuilder,MirNodeKind,untyped	mirconstr: subTree(bu: var MirBuilder; k: MirNodeKind; body: untyped)	
stmtList	mir/mirconstr.html#stmtList.t,MirBuilder,untyped	mirconstr: stmtList(bu: var MirBuilder; body: untyped)	
scope	mir/mirconstr.html#scope.t,MirBuilder,untyped	mirconstr: scope(bu: var MirBuilder; body: untyped)	
allocTemp	mir/mirconstr.html#allocTemp.t,MirBuilder,PType	mirconstr: allocTemp(bu: var MirBuilder; t: PType; alias = false): Value	
use	mir/mirconstr.html#use,MirBuilder,sinkValue	mirconstr: use(bu: var MirBuilder; val: sink Value)	
wrapTemp	mir/mirconstr.html#wrapTemp.t,MirBuilder,PType,untyped	mirconstr: wrapTemp(bu: var MirBuilder; t: PType; body: untyped): Value	
wrapAlias	mir/mirconstr.html#wrapAlias.t,MirBuilder,PType,untyped	mirconstr: wrapAlias(bu: var MirBuilder; t: PType; body: untyped): Value	
wrapMutAlias	mir/mirconstr.html#wrapMutAlias.t,MirBuilder,PType,untyped	mirconstr: wrapMutAlias(bu: var MirBuilder; t: PType; body: untyped): Value	
buildMagicCall	mir/mirconstr.html#buildMagicCall.t,MirBuilder,TMagic,PType,untyped	mirconstr: buildMagicCall(bu: var MirBuilder; m: TMagic; t: PType; body: untyped)	
buildCall	mir/mirconstr.html#buildCall.t,MirBuilder,ProcedureId,PType,PType,untyped	mirconstr: buildCall(bu: var MirBuilder; prc: ProcedureId; pt, t: PType; body: untyped)	
emitByVal	mir/mirconstr.html#emitByVal,MirBuilder,Value	mirconstr: emitByVal(bu: var MirBuilder; y: Value)	
emitByName	mir/mirconstr.html#emitByName.t,MirBuilder,EffectKind,untyped	mirconstr: emitByName(bu: var MirBuilder; e: EffectKind; body: untyped)	
emitByName	mir/mirconstr.html#emitByName,MirBuilder,Value,EffectKind	mirconstr: emitByName(bu: var MirBuilder; val: Value; e: EffectKind)	
move	mir/mirconstr.html#move,MirBuilder,Value	mirconstr: move(bu: var MirBuilder; val: Value)	
asgn	mir/mirconstr.html#asgn,MirBuilder,Value,Value	mirconstr: asgn(buf: var MirBuilder; a, b: Value)	
asgnMove	mir/mirconstr.html#asgnMove,MirBuilder,Value,Value	mirconstr: asgnMove(bu: var MirBuilder; a, b: Value)	
inline	mir/mirconstr.html#inline,MirBuilder,MirTree,NodePosition	mirconstr: inline(bu: var MirBuilder; tree: MirTree; fr: NodePosition): Value	
bindImmutable	mir/mirconstr.html#bindImmutable,MirBuilder,MirTree,NodePosition	mirconstr: bindImmutable(bu: var MirBuilder; tree: MirTree; lval: NodePosition): Value	
bindMut	mir/mirconstr.html#bindMut,MirBuilder,MirTree,NodePosition	mirconstr: bindMut(bu: var MirBuilder; tree: MirTree; lval: NodePosition): Value	
materialize	mir/mirconstr.html#materialize,MirBuilder,Value	mirconstr: materialize(bu: var MirBuilder; loc: Value): Value	
materializeMove	mir/mirconstr.html#materializeMove,MirBuilder,Value	mirconstr: materializeMove(bu: var MirBuilder; loc: Value): Value	
finish	mir/mirconstr.html#finish,sinkMirBuilder	mirconstr: finish(bu: sink MirBuilder): MirTree	
