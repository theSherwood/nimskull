ggDebug	ast/ast.html#ggDebug	ast: ggDebug	
addAllowNil	ast/ast.html#addAllowNil,Indexable,Indexable	ast: addAllowNil(father, son: Indexable)	
newNodeIT	ast/ast.html#newNodeIT,TNodeKind,TLineInfo,PType,int	ast: newNodeIT(kind: TNodeKind; info: TLineInfo; typ: PType; children: int): PNode	
newNodeIT	ast/ast.html#newNodeIT,TNodeKind,TLineInfo,PType	ast: newNodeIT(kind: TNodeKind; info: TLineInfo; typ: PType): PNode	
newNodeI	ast/ast.html#newNodeI,TNodeKind,TLineInfo,int	ast: newNodeI(kind: TNodeKind; info: TLineInfo; children: int): PNode	
newNodeI	ast/ast.html#newNodeI,TNodeKind,TLineInfo	ast: newNodeI(kind: TNodeKind; info: TLineInfo): PNode	
newNode	ast/ast.html#newNode,TNodeKind	ast: newNode(kind: TNodeKind): PNode	
newTree	ast/ast.html#newTree,TNodeKind,varargs[PNode]	ast: newTree(kind: TNodeKind; children: varargs[PNode]): PNode	
newTreeI	ast/ast.html#newTreeI,TNodeKind,TLineInfo,varargs[PNode]	ast: newTreeI(kind: TNodeKind; info: TLineInfo; children: varargs[PNode]): PNode	
newTreeIT	ast/ast.html#newTreeIT,TNodeKind,TLineInfo,PType,varargs[PNode]	ast: newTreeIT(kind: TNodeKind; info: TLineInfo; typ: PType; children: varargs[PNode]): PNode	
newSym	ast/ast.html#newSym,TSymKind,PIdent,ItemId,PSym,TLineInfo,PType,TOptions	ast: newSym(symKind: TSymKind; name: PIdent; id: ItemId; owner: PSym;\n       info: TLineInfo; typ: PType; options: TOptions = {}): PSym	
newSym	ast/ast.html#newSym,TSymKind,PIdent,ItemId,PSym,TLineInfo,TOptions	ast: newSym(symKind: TSymKind; name: PIdent; id: ItemId; owner: PSym;\n       info: TLineInfo; options: TOptions = {}): PSym	
linkTo	ast/ast.html#linkTo,PType,PSym	ast: linkTo(t: PType; s: PSym): PType	
linkTo	ast/ast.html#linkTo,PSym,PType	ast: linkTo(s: PSym; t: PType): PSym	
appendToModule	ast/ast.html#appendToModule,PSym,PNode	ast: appendToModule(m: PSym; n: PNode)	
GrowthFactor	ast/ast.html#GrowthFactor	ast: GrowthFactor	
StartSize	ast/ast.html#StartSize	ast: StartSize	
copyStrTable	ast/ast.html#copyStrTable,TStrTable,TStrTable	ast: copyStrTable(dest: var TStrTable; src: TStrTable)	
copyIdTable	ast/ast.html#copyIdTable,TIdTable,TIdTable	ast: copyIdTable(dest: var TIdTable; src: TIdTable)	
copyObjectSet	ast/ast.html#copyObjectSet,TObjectSet,TObjectSet	ast: copyObjectSet(dest: var TObjectSet; src: TObjectSet)	
discardSons	ast/ast.html#discardSons,PNode	ast: discardSons(father: PNode)	
withInfo	ast/ast.html#withInfo,PNode,TLineInfo	ast: withInfo(n: PNode; info: TLineInfo): PNode	
newIdentNode	ast/ast.html#newIdentNode,PIdent,TLineInfo	ast: newIdentNode(ident: PIdent; info: TLineInfo): PNode	
newSymNode2	ast/ast.html#newSymNode2,PSym	ast: newSymNode2(sym: PSym): PNode	
newSymNode2	ast/ast.html#newSymNode2,PSym,TLineInfo	ast: newSymNode2(sym: PSym; info: TLineInfo): PNode	
newSymNodeIT	ast/ast.html#newSymNodeIT,PSym,TLineInfo,PType	ast: newSymNodeIT(sym: PSym; info: TLineInfo; typ: PType): PNode	
newSymNode	ast/ast.html#newSymNode,PSym,TLineInfo	ast: newSymNode(sym: PSym; info: TLineInfo): PNode	
newSymNode	ast/ast.html#newSymNode,PSym	ast: newSymNode(sym: PSym): PNode	
newIntNode	ast/ast.html#newIntNode,TNodeKind,BiggestInt	ast: newIntNode(kind: TNodeKind; intVal: BiggestInt): PNode	
newIntNode	ast/ast.html#newIntNode,TNodeKind,Int128	ast: newIntNode(kind: TNodeKind; intVal: Int128): PNode	
newIntTypeNode	ast/ast.html#newIntTypeNode,BiggestInt,PType	ast: newIntTypeNode(intVal: BiggestInt; typ: PType): PNode	
newIntTypeNode	ast/ast.html#newIntTypeNode,Int128,PType	ast: newIntTypeNode(intVal: Int128; typ: PType): PNode	
newFloatNode	ast/ast.html#newFloatNode,TNodeKind,BiggestFloat	ast: newFloatNode(kind: TNodeKind; floatVal: BiggestFloat): PNode	
newStrNode	ast/ast.html#newStrNode,TNodeKind,string	ast: newStrNode(kind: TNodeKind; strVal: string): PNode	
newStrNode	ast/ast.html#newStrNode,string,TLineInfo	ast: newStrNode(strVal: string; info: TLineInfo): PNode	
newProcNode	ast/ast.html#newProcNode,TNodeKind,TLineInfo,PNode,PNode,PNode,PNode,PNode,PNode,PNode	ast: newProcNode(kind: TNodeKind; info: TLineInfo; body: PNode;\n            params, name, pattern, genericParams, pragmas, exceptions: PNode): PNode	
newTypeError	ast/ast.html#newTypeError,PType,ItemId,PSym,PNode	ast: newTypeError(prev: PType; id: ItemId;\n             owner: PSym = if isNil(prev): nil else: prev.owner; err: PNode): PType	
newType	ast/ast.html#newType,TTypeKind,ItemId,PSym	ast: newType(kind: TTypeKind; id: ItemId; owner: PSym): PType	
newSons	ast/ast.html#newSons,Indexable,int	ast: newSons(father: Indexable; length: int)	
assignType	ast/ast.html#assignType,PType,PType	ast: assignType(dest, src: PType)	
copyType	ast/ast.html#copyType,PType,ItemId,PSym	ast: copyType(t: PType; id: ItemId; owner: PSym): PType	
exactReplica	ast/ast.html#exactReplica,PType	ast: exactReplica(t: PType): PType	
copySym	ast/ast.html#copySym,PSym,ItemId	ast: copySym(s: PSym; id: ItemId): PSym	
createModuleAlias	ast/ast.html#createModuleAlias,PSym,ItemId,PIdent,TLineInfo,TOptions	ast: createModuleAlias(s: PSym; id: ItemId; newIdent: PIdent; info: TLineInfo;\n                  options: TOptions): PSym	
initStrTable	ast/ast.html#initStrTable,TStrTable	ast: initStrTable(x: var TStrTable)	
newStrTable	ast/ast.html#newStrTable	ast: newStrTable(): TStrTable	
initIdTable	ast/ast.html#initIdTable,TIdTable	ast: initIdTable(x: var TIdTable)	
newIdTable	ast/ast.html#newIdTable	ast: newIdTable(): TIdTable	
resetIdTable	ast/ast.html#resetIdTable,TIdTable	ast: resetIdTable(x: var TIdTable)	
initObjectSet	ast/ast.html#initObjectSet,TObjectSet	ast: initObjectSet(x: var TObjectSet)	
initIdNodeTable	ast/ast.html#initIdNodeTable,TIdNodeTable	ast: initIdNodeTable(x: var TIdNodeTable)	
newIdNodeTable	ast/ast.html#newIdNodeTable	ast: newIdNodeTable(): TIdNodeTable	
initNodeTable	ast/ast.html#initNodeTable,TNodeTable	ast: initNodeTable(x: var TNodeTable)	
isGCedMem	ast/ast.html#isGCedMem,PType	ast: isGCedMem(t: PType): bool	
propagateToOwner	ast/ast.html#propagateToOwner,PType,PType	ast: propagateToOwner(owner, elem: PType; propagateHasAsgn = true)	
rawAddSon	ast/ast.html#rawAddSon,PType,PType	ast: rawAddSon(father, son: PType; propagateHasAsgn = true)	
rawAddSonNoPropagationOfTypeFlags	ast/ast.html#rawAddSonNoPropagationOfTypeFlags,PType,PType	ast: rawAddSonNoPropagationOfTypeFlags(father, son: PType)	
addSonNilAllowed	ast/ast.html#addSonNilAllowed,PNode,PNode	ast: addSonNilAllowed(father, son: PNode)	
delSon	ast/ast.html#delSon,PNode,int	ast: delSon(father: PNode; idx: int)	
copyNode	ast/ast.html#copyNode,PNode	ast: copyNode(src: PNode): PNode	
transitionSonsKind	ast/ast.html#transitionSonsKind,PNode,range[]	ast: transitionSonsKind(n: PNode; kind: range[nkDotCall .. nkTupleConstr])	
transitionIntKind	ast/ast.html#transitionIntKind,PNode,range[]	ast: transitionIntKind(n: PNode; kind: range[nkCharLit .. nkUInt64Lit])	
transitionNoneToSym	ast/ast.html#transitionNoneToSym,PNode	ast: transitionNoneToSym(n: PNode)	
transitionSymKindCommon	ast/ast.html#transitionSymKindCommon.t,TSymKind	ast: transitionSymKindCommon(k: TSymKind)	
transitionGenericParamToType	ast/ast.html#transitionGenericParamToType,PSym	ast: transitionGenericParamToType(s: PSym)	
transitionRoutineSymKind	ast/ast.html#transitionRoutineSymKind,PSym,range[]	ast: transitionRoutineSymKind(s: PSym; kind: range[skProc .. skTemplate])	
transitionToLet	ast/ast.html#transitionToLet,PSym	ast: transitionToLet(s: PSym)	
transitionToError	ast/ast.html#transitionToError,PSym,PNode	ast: transitionToError(s: PSym; err: PNode)	
shallowCopy	ast/ast.html#shallowCopy,PNode	ast: shallowCopy(src: PNode): PNode	
copyTree	ast/ast.html#copyTree,PNode	ast: copyTree(src: PNode): PNode	
copyTreeWithoutNode	ast/ast.html#copyTreeWithoutNode,PNode,PNode	ast: copyTreeWithoutNode(src, skippedNode: PNode): PNode	
copyTreeWithoutNodes	ast/ast.html#copyTreeWithoutNodes,PNode,varargs[PNode]	ast: copyTreeWithoutNodes(src: PNode; skippedNodes: varargs[PNode]): PNode	
makeStmtList	ast/ast.html#makeStmtList,PNode	ast: makeStmtList(n: PNode): PNode	
toVar	ast/ast.html#toVar,PType,TTypeKind,IdGenerator	ast: toVar(typ: PType; kind: TTypeKind; idgen: IdGenerator): PType	
toRef	ast/ast.html#toRef,PType,IdGenerator	ast: toRef(typ: PType; idgen: IdGenerator): PType	
toObject	ast/ast.html#toObject,PType	ast: toObject(typ: PType): PType	
toObjectFromRefPtrGeneric	ast/ast.html#toObjectFromRefPtrGeneric,PType	ast: toObjectFromRefPtrGeneric(typ: PType): PType	
newProcType	ast/ast.html#newProcType,TLineInfo,ItemId,PSym	ast: newProcType(info: TLineInfo; id: ItemId; owner: PSym): PType	
addParam	ast/ast.html#addParam,PType,PSym	ast: addParam(procType: PType; param: PSym)	
toHumanStr	ast/ast.html#toHumanStr,TSymKind	ast: toHumanStr(kind: TSymKind): string	
toHumanStr	ast/ast.html#toHumanStr,TTypeKind	ast: toHumanStr(kind: TTypeKind): string	
toTNodeKind	ast/ast.html#toTNodeKind,ParsedNodeKind	ast: toTNodeKind(kind: ParsedNodeKind): TNodeKind	
splitCustomLit	ast/ast.html#splitCustomLit,ParsedNode	ast: splitCustomLit(n: ParsedNode): tuple[num, ident: ParsedNode]	
toPNode	ast/ast.html#toPNode,ParsedNode	ast: toPNode(parsed: ParsedNode): PNode	
