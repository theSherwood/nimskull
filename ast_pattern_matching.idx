nnkIntLiterals	ast_pattern_matching.html#nnkIntLiterals	ast_pattern_matching: nnkIntLiterals	
nnkStringLiterals	ast_pattern_matching.html#nnkStringLiterals	ast_pattern_matching: nnkStringLiterals	
nnkFloatLiterals	ast_pattern_matching.html#nnkFloatLiterals	ast_pattern_matching: nnkFloatLiterals	
NoError	ast_pattern_matching.html#NoError	MatchingErrorKind.NoError	
WrongKindLength	ast_pattern_matching.html#WrongKindLength	MatchingErrorKind.WrongKindLength	
WrongKindValue	ast_pattern_matching.html#WrongKindValue	MatchingErrorKind.WrongKindValue	
WrongIdent	ast_pattern_matching.html#WrongIdent	MatchingErrorKind.WrongIdent	
WrongCustomCondition	ast_pattern_matching.html#WrongCustomCondition	MatchingErrorKind.WrongCustomCondition	
MatchingErrorKind	ast_pattern_matching.html#MatchingErrorKind	ast_pattern_matching: MatchingErrorKind	
`$`	ast_pattern_matching.html#$,MatchingError	ast_pattern_matching: `$`(arg: MatchingError): string	
failWithMatchingError	ast_pattern_matching.html#failWithMatchingError,MatchingError	ast_pattern_matching: failWithMatchingError(arg: MatchingError): void	
matchLengthKind	ast_pattern_matching.html#matchLengthKind,NimNode,set[NimNodeKind],int	ast_pattern_matching: matchLengthKind(arg: NimNode; kind: set[NimNodeKind]; length: int): MatchingError	
matchLengthKind	ast_pattern_matching.html#matchLengthKind,NimNode,NimNodeKind,int	ast_pattern_matching: matchLengthKind(arg: NimNode; kind: NimNodeKind; length: int): MatchingError	
matchIdent	ast_pattern_matching.html#matchIdent,NimNode,string	ast_pattern_matching: matchIdent(arg: NimNode; value: string): MatchingError	
checkCustomExpr	ast_pattern_matching.html#checkCustomExpr,NimNode,bool,string	ast_pattern_matching: checkCustomExpr(arg: NimNode; cond: bool; exprstr: string): MatchingError	
matchAst	ast_pattern_matching.html#matchAst.m,NimNode,varargs[untyped]	ast_pattern_matching: matchAst(astExpr: NimNode; args: varargs[untyped]): untyped	
recursiveNodeVisiting	ast_pattern_matching.html#recursiveNodeVisiting,NimNode,proc(NimNode)	ast_pattern_matching: recursiveNodeVisiting(arg: NimNode; callback: proc (arg: NimNode): bool)	
matchAstRecursive	ast_pattern_matching.html#matchAstRecursive.m,NimNode,varargs[untyped]	ast_pattern_matching: matchAstRecursive(ast: NimNode; args: varargs[untyped]): untyped	
