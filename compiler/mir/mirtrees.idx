TempId	mir/mirtrees.html#TempId	mirtrees: TempId	
LabelId	mir/mirtrees.html#LabelId	mirtrees: LabelId	
mnkProc	mir/mirtrees.html#mnkProc	MirNodeKind.mnkProc	
mnkConst	mir/mirtrees.html#mnkConst	MirNodeKind.mnkConst	
mnkGlobal	mir/mirtrees.html#mnkGlobal	MirNodeKind.mnkGlobal	
mnkParam	mir/mirtrees.html#mnkParam	MirNodeKind.mnkParam	
mnkLocal	mir/mirtrees.html#mnkLocal	MirNodeKind.mnkLocal	
mnkTemp	mir/mirtrees.html#mnkTemp	MirNodeKind.mnkTemp	
mnkOpParam	mir/mirtrees.html#mnkOpParam	MirNodeKind.mnkOpParam	
mnkLiteral	mir/mirtrees.html#mnkLiteral	MirNodeKind.mnkLiteral	
mnkType	mir/mirtrees.html#mnkType	MirNodeKind.mnkType	
mnkNone	mir/mirtrees.html#mnkNone	MirNodeKind.mnkNone	
mnkDef	mir/mirtrees.html#mnkDef	MirNodeKind.mnkDef	
mnkDefCursor	mir/mirtrees.html#mnkDefCursor	MirNodeKind.mnkDefCursor	
mnkDefUnpack	mir/mirtrees.html#mnkDefUnpack	MirNodeKind.mnkDefUnpack	
mnkFastAsgn	mir/mirtrees.html#mnkFastAsgn	MirNodeKind.mnkFastAsgn	
mnkAsgn	mir/mirtrees.html#mnkAsgn	MirNodeKind.mnkAsgn	
mnkInit	mir/mirtrees.html#mnkInit	MirNodeKind.mnkInit	
mnkSwitch	mir/mirtrees.html#mnkSwitch	MirNodeKind.mnkSwitch	
mnkPathNamed	mir/mirtrees.html#mnkPathNamed	MirNodeKind.mnkPathNamed	
mnkPathPos	mir/mirtrees.html#mnkPathPos	MirNodeKind.mnkPathPos	
mnkPathArray	mir/mirtrees.html#mnkPathArray	MirNodeKind.mnkPathArray	
mnkPathVariant	mir/mirtrees.html#mnkPathVariant	MirNodeKind.mnkPathVariant	
mnkAddr	mir/mirtrees.html#mnkAddr	MirNodeKind.mnkAddr	
mnkDeref	mir/mirtrees.html#mnkDeref	MirNodeKind.mnkDeref	
mnkView	mir/mirtrees.html#mnkView	MirNodeKind.mnkView	
mnkDerefView	mir/mirtrees.html#mnkDerefView	MirNodeKind.mnkDerefView	
mnkStdConv	mir/mirtrees.html#mnkStdConv	MirNodeKind.mnkStdConv	
mnkConv	mir/mirtrees.html#mnkConv	MirNodeKind.mnkConv	
mnkCast	mir/mirtrees.html#mnkCast	MirNodeKind.mnkCast	
mnkCall	mir/mirtrees.html#mnkCall	MirNodeKind.mnkCall	
mnkMagic	mir/mirtrees.html#mnkMagic	MirNodeKind.mnkMagic	
mnkRaise	mir/mirtrees.html#mnkRaise	MirNodeKind.mnkRaise	
mnkTag	mir/mirtrees.html#mnkTag	MirNodeKind.mnkTag	
mnkConstr	mir/mirtrees.html#mnkConstr	MirNodeKind.mnkConstr	
mnkObjConstr	mir/mirtrees.html#mnkObjConstr	MirNodeKind.mnkObjConstr	
mnkArg	mir/mirtrees.html#mnkArg	MirNodeKind.mnkArg	
mnkName	mir/mirtrees.html#mnkName	MirNodeKind.mnkName	
mnkConsume	mir/mirtrees.html#mnkConsume	MirNodeKind.mnkConsume	
mnkVoid	mir/mirtrees.html#mnkVoid	MirNodeKind.mnkVoid	
mnkField	mir/mirtrees.html#mnkField	MirNodeKind.mnkField	
mnkArgBlock	mir/mirtrees.html#mnkArgBlock	MirNodeKind.mnkArgBlock	
mnkRegion	mir/mirtrees.html#mnkRegion	MirNodeKind.mnkRegion	
mnkStmtList	mir/mirtrees.html#mnkStmtList	MirNodeKind.mnkStmtList	
mnkScope	mir/mirtrees.html#mnkScope	MirNodeKind.mnkScope	
mnkIf	mir/mirtrees.html#mnkIf	MirNodeKind.mnkIf	
mnkCase	mir/mirtrees.html#mnkCase	MirNodeKind.mnkCase	
mnkRepeat	mir/mirtrees.html#mnkRepeat	MirNodeKind.mnkRepeat	
mnkTry	mir/mirtrees.html#mnkTry	MirNodeKind.mnkTry	
mnkExcept	mir/mirtrees.html#mnkExcept	MirNodeKind.mnkExcept	
mnkFinally	mir/mirtrees.html#mnkFinally	MirNodeKind.mnkFinally	
mnkBlock	mir/mirtrees.html#mnkBlock	MirNodeKind.mnkBlock	
mnkBreak	mir/mirtrees.html#mnkBreak	MirNodeKind.mnkBreak	
mnkReturn	mir/mirtrees.html#mnkReturn	MirNodeKind.mnkReturn	
mnkBranch	mir/mirtrees.html#mnkBranch	MirNodeKind.mnkBranch	
mnkAsm	mir/mirtrees.html#mnkAsm	MirNodeKind.mnkAsm	
mnkEmit	mir/mirtrees.html#mnkEmit	MirNodeKind.mnkEmit	
mnkEnd	mir/mirtrees.html#mnkEnd	MirNodeKind.mnkEnd	
mnkPNode	mir/mirtrees.html#mnkPNode	MirNodeKind.mnkPNode	
MirNodeKind	mir/mirtrees.html#MirNodeKind	mirtrees: MirNodeKind	
ekMutate	mir/mirtrees.html#ekMutate	EffectKind.ekMutate	
ekReassign	mir/mirtrees.html#ekReassign	EffectKind.ekReassign	
ekKill	mir/mirtrees.html#ekKill	EffectKind.ekKill	
ekInvalidate	mir/mirtrees.html#ekInvalidate	EffectKind.ekInvalidate	
EffectKind	mir/mirtrees.html#EffectKind	mirtrees: EffectKind	
geMutateGlobal	mir/mirtrees.html#geMutateGlobal	GeneralEffect.geMutateGlobal	
geRaises	mir/mirtrees.html#geRaises	GeneralEffect.geRaises	
GeneralEffect	mir/mirtrees.html#GeneralEffect	mirtrees: GeneralEffect	
MirNode	mir/mirtrees.html#MirNode	mirtrees: MirNode	
MirTree	mir/mirtrees.html#MirTree	mirtrees: MirTree	
MirNodeSeq	mir/mirtrees.html#MirNodeSeq	mirtrees: MirNodeSeq	
NodeIndex	mir/mirtrees.html#NodeIndex	mirtrees: NodeIndex	
NodeInstance	mir/mirtrees.html#NodeInstance	mirtrees: NodeInstance	
NodePosition	mir/mirtrees.html#NodePosition	mirtrees: NodePosition	
Operation	mir/mirtrees.html#Operation	mirtrees: Operation	
OpValue	mir/mirtrees.html#OpValue	mirtrees: OpValue	
AllNodeKinds	mir/mirtrees.html#AllNodeKinds	mirtrees: AllNodeKinds	
DefNodes	mir/mirtrees.html#DefNodes	mirtrees: DefNodes	
SubTreeNodes	mir/mirtrees.html#SubTreeNodes	mirtrees: SubTreeNodes	
AtomNodes	mir/mirtrees.html#AtomNodes	mirtrees: AtomNodes	
InputNodes	mir/mirtrees.html#InputNodes	mirtrees: InputNodes	
InOutNodes	mir/mirtrees.html#InOutNodes	mirtrees: InOutNodes	
SourceNodes	mir/mirtrees.html#SourceNodes	mirtrees: SourceNodes	
OutputNodes	mir/mirtrees.html#OutputNodes	mirtrees: OutputNodes	
ArgumentNodes	mir/mirtrees.html#ArgumentNodes	mirtrees: ArgumentNodes	
SingleInputNodes	mir/mirtrees.html#SingleInputNodes	mirtrees: SingleInputNodes	
StmtNodes	mir/mirtrees.html#StmtNodes	mirtrees: StmtNodes	
SymbolLike	mir/mirtrees.html#SymbolLike	mirtrees: SymbolLike	
`==`	mir/mirtrees.html#==,TempId,TempId	mirtrees: `==`(a, b: TempId): bool	
`==`	mir/mirtrees.html#==,LabelId,LabelId	mirtrees: `==`(a, b: LabelId): bool	
indexLike	mir/mirtrees.html#indexLike.t,typedesc[NodeInstance]	mirtrees: indexLike(_: typedesc[NodeInstance])	
`-`	mir/mirtrees.html#-.t,NodePosition,int	mirtrees: `-`(a: NodePosition; b: int): NodePosition	
`+`	mir/mirtrees.html#+.t,NodePosition,int	mirtrees: `+`(a: NodePosition; b: int): NodePosition	
dec	mir/mirtrees.html#dec.t,NodePosition	mirtrees: dec(a: var NodePosition)	
inc	mir/mirtrees.html#inc.t,NodePosition	mirtrees: inc(a: var NodePosition)	
toOp	mir/mirtrees.html#toOp.c,OpValue	mirtrees: toOp(x: OpValue): Operation	
`&lt;`	mir/mirtrees.html#<,NodePosition,NodePosition	mirtrees: `&lt;`(a, b: NodePosition): bool	
`&lt;=`	mir/mirtrees.html#<=,NodePosition,NodePosition	mirtrees: `&lt;=`(a, b: NodePosition): bool	
`==`	mir/mirtrees.html#==,NodePosition,NodePosition	mirtrees: `==`(a, b: NodePosition): bool	
`==`	mir/mirtrees.html#==,Operation,Operation	mirtrees: `==`(a, b: Operation): bool	
`in`	mir/mirtrees.html#in,NodePosition,MirTree	mirtrees: `in`(p: NodePosition; tree: MirTree): bool	
`[]`	mir/mirtrees.html#[].t,MirTree,	mirtrees: `[]`(tree: MirTree; i: NodePosition | NodeInstance | Operation | OpValue): untyped	
parent	mir/mirtrees.html#parent,MirTree,NodePosition	mirtrees: parent(tree: MirTree; n: NodePosition): NodePosition	
parentEnd	mir/mirtrees.html#parentEnd,MirTree,NodePosition	mirtrees: parentEnd(tree: MirTree; n: NodePosition): NodePosition	
sibling	mir/mirtrees.html#sibling,MirTree,NodePosition	mirtrees: sibling(tree: MirTree; n: NodePosition): NodePosition	
previous	mir/mirtrees.html#previous,MirTree,NodePosition	mirtrees: previous(tree: MirTree; n: NodePosition): NodePosition	
computeSpan	mir/mirtrees.html#computeSpan,MirTree,NodePosition	mirtrees: computeSpan(tree: MirTree; n: NodePosition): Slice[NodePosition]	
start	mir/mirtrees.html#start,MirTree,NodePosition	mirtrees: start(tree: MirTree; n: NodePosition): NodePosition	
findEnd	mir/mirtrees.html#findEnd,MirTree,NodePosition	mirtrees: findEnd(tree: MirTree; n: NodePosition): NodePosition	
childIdx	mir/mirtrees.html#childIdx,MirTree,NodePosition,int	mirtrees: childIdx(tree: MirTree; n: NodePosition; index: int): NodePosition	
child	mir/mirtrees.html#child,MirTree,NodePosition,int	mirtrees: child(tree: MirTree; n: NodePosition; index: int): lent MirNode	
getStart	mir/mirtrees.html#getStart,MirTree,NodePosition	mirtrees: getStart(tree: MirTree; n: NodePosition): NodePosition	
findParent	mir/mirtrees.html#findParent,MirTree,NodePosition,MirNodeKind	mirtrees: findParent(tree: MirTree; start: NodePosition; kind: MirNodeKind): NodePosition	
operand	mir/mirtrees.html#operand,MirTree,Operation,Natural	mirtrees: operand(tree: MirTree; op: Operation; opr: Natural): OpValue	
operands	mir/mirtrees.html#operands,MirTree,Operation,Slice[int],openArray[OpValue]	mirtrees: operands(tree: MirTree; op: Operation; slice: Slice[int];\n         result: var openArray[OpValue])	
fetchArgs	mir/mirtrees.html#fetchArgs,MirTree,Operation,openArray[NodePosition]	mirtrees: fetchArgs(tree: MirTree; op: Operation; result: var openArray[NodePosition])	
numArgs	mir/mirtrees.html#numArgs,MirTree,Operation	mirtrees: numArgs(tree: MirTree; op: Operation): int	
unaryOperand	mir/mirtrees.html#unaryOperand,MirTree,Operation	mirtrees: unaryOperand(tree: MirTree; op: Operation): OpValue	
hasInput	mir/mirtrees.html#hasInput,MirTree,Operation	mirtrees: hasInput(tree: MirTree; op: Operation): bool	
pairs	mir/mirtrees.html#pairs.i,MirTree	mirtrees: pairs(tree: MirTree): (NodePosition, lent MirNode)	
subNodes	mir/mirtrees.html#subNodes.i,MirTree,NodePosition	mirtrees: subNodes(tree: MirTree; n: NodePosition): NodePosition	
lpairs	mir/mirtrees.html#lpairs.i,seq[T]	mirtrees: lpairs[T](x: seq[T]): (int, lent T)	
